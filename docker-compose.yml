version: "3.8"
services:
  load-balancer:
    build: load-balancer
    restart: always
    ports:
      - "80:80"
    depends_on:
      - front
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:80/health-check || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    command: nginx -g 'daemon off;'
    networks:
      - default
      - autharitus
  front:
    build: front
    restart: always
    ports:
      - "8080"
    depends_on:
      - post
    networks:
      - autharitus
  post:
    build: post
    restart: always
    ports:
      - "8080"
    depends_on:
      - entry-store
    networks:
      - autharitus
  entry-store:
    build: entry-store
    restart: always
    ports:
      - "8080"
    depends_on:
      - database
    environment:
      ENTRY_STORE_MONGO_USERNAME: ${ENTRY_STORE_MONGO_USERNAME}
      ENTRY_STORE_MONGO_PASSWORD: ${ENTRY_STORE_MONGO_PASSWORD}
    networks:
      - autharitus
      - demonades
  message-broker:
    image: rabbitmq:3.8-management
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ./message-broker/data/:/var/lib/rabbitmq/
        - ./message-broker/log/:/var/log/rabbitmq
  database:
    image: mongo:5.0.19
    restart: always
    ports: 
      - "27017"
    volumes:
      - ./database/.data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - demonades
networks:
  default:
    name: "${COMPOSE_PROJECT_NAME}_abdalonim"
  autharitus: 
    name: "${COMPOSE_PROJECT_NAME}_autharitus"
  demonades:
    name: "${COMPOSE_PROJECT_NAME}_demonades"

# services:
#   nginx-proxy:
#     build: nginx
#     restart: always
#     ports:
#       - "80:80"
#     depends_on:
#       - flask-app
#     healthcheck:
#       test: ["CMD-SHELL", "curl --silent --fail localhost:80/health-check || exit 1"]
#       interval: 10s
#       timeout: 10s
#       retries: 3
#     command: nginx -g 'daemon off;'
#   flask-app:
#     build: flask
#     restart: always
#     ports: 
#       - '8000'
#     healthcheck:
#       test: ["CMD-SHELL", "curl --silent --fail localhost:8000/flask-health-check || exit 1"]
#       interval: 10s
#       timeout: 10s
#       retries: 3
#     command: gunicorn -w 3 -t 60 -b 0.0.0.0:8000 app:app